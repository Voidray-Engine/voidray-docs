"""
VoidRay Tutorial: Creating Your First Game
==========================================

This tutorial will guide you through creating a complete game from scratch using VoidRay. 
We'll build a physics-based collection game where the player moves around collecting coins 
while avoiding bouncing enemies.
"""

import voidray
from voidray import Scene, Sprite, Vector2, Component
from voidray.graphics.renderer import Color
from voidray.physics import Rigidbody, BoxCollider
from voidray.input import Keys
import random

class PlayerController(Component):
    """Player movement component"""

    def __init__(self, speed=200):
        super().__init__()
        self.speed = speed
        self.rigidbody = None

    def start(self):
        self.rigidbody = self.game_object.get_component(Rigidbody)

    def update(self, delta_time):
        if not self.rigidbody:
            return

        input_mgr = voidray.get_engine().input_manager

        # Get movement input
        movement = Vector2(0, 0)
        if input_mgr.is_key_pressed(Keys.A) or input_mgr.is_key_pressed(Keys.LEFT):
            movement.x = -1
        if input_mgr.is_key_pressed(Keys.D) or input_mgr.is_key_pressed(Keys.RIGHT):
            movement.x = 1
        if input_mgr.is_key_pressed(Keys.W) or input_mgr.is_key_pressed(Keys.UP):
            movement.y = -1
        if input_mgr.is_key_pressed(Keys.S) or input_mgr.is_key_pressed(Keys.DOWN):
            movement.y = 1

        # Apply movement
        if movement.magnitude() > 0:
            movement = movement.normalized() * self.speed
            self.rigidbody.velocity = movement

class CoinCollector(Component):
    """Handles coin collection"""

    def __init__(self):
        super().__init__()
        self.score = 0

    def collect_coin(self):
        self.score += 10
        print(f"Score: {self.score}")

class Enemy(Component):
    """Simple bouncing enemy behavior"""

    def __init__(self, speed=100):
        super().__init__()
        self.speed = speed
        self.rigidbody = None
        self.direction = Vector2(random.uniform(-1, 1), random.uniform(-1, 1)).normalized()

    def start(self):
        self.rigidbody = self.game_object.get_component(Rigidbody)
        if self.rigidbody:
            self.rigidbody.velocity = self.direction * self.speed

    def update(self, delta_time):
        if not self.rigidbody:
            return

        # Bounce off screen edges
        pos = self.game_object.transform.position
        engine = voidray.get_engine()

        if pos.x <= 25 or pos.x >= engine.width - 25:
            self.rigidbody.velocity.x *= -1
        if pos.y <= 25 or pos.y >= engine.height - 25:
            self.rigidbody.velocity.y *= -1

class GameScene(Scene):
    """Main game scene"""

    def __init__(self):
        super().__init__()
        self.player = None
        self.coins = []
        self.enemies = []
        self.coin_collector = None

    def update(self, delta_time):
        """Update scene and check collisions"""
        super().update(delta_time)
        
        # Safety check - ensure player exists
        if not self.player:
            return
            
        # Check collisions between player and coins
        player_collider = self.player.get_component(BoxCollider)
        if player_collider:
            for coin in self.coins[:]:  # Use slice copy to safely modify during iteration
                coin_collider = coin.get_component(BoxCollider)
                if coin_collider and self._check_collision(player_collider, coin_collider):
                    self.on_collision(self.player, coin)
            
            # Check collisions between player and enemies
            for enemy in self.enemies:
                enemy_collider = enemy.get_component(BoxCollider)
                if enemy_collider and self._check_collision(player_collider, enemy_collider):
                    self.on_collision(self.player, enemy)
    
    def _check_collision(self, collider1, collider2):
        """Simple AABB collision detection"""
        if not collider1 or not collider2:
            return False
            
        # Get positions and sizes
        pos1 = collider1.game_object.transform.position
        pos2 = collider2.game_object.transform.position
        
        # Get collider dimensions (assuming width/height attributes)
        w1, h1 = getattr(collider1, 'width', 30), getattr(collider1, 'height', 30)
        w2, h2 = getattr(collider2, 'width', 30), getattr(collider2, 'height', 30)
        
        # AABB collision check
        return (pos1.x < pos2.x + w2 and
                pos1.x + w1 > pos2.x and
                pos1.y < pos2.y + h2 and
                pos1.y + h1 > pos2.y)

    def on_enter(self):
        super().on_enter()

        # Create player
        self.player = Sprite("Player")
        self.player.create_colored_rect(30, 30, Color.BLUE)
        self.player.transform.position = Vector2(400, 300)

        # Add player components
        player_rb = Rigidbody()
        player_rb.friction = 0.8
        self.player.add_component(player_rb)
        self.player.add_component(BoxCollider(30, 30))
        self.player.add_component(PlayerController(250))

        self.coin_collector = CoinCollector()
        self.player.add_component(self.coin_collector)

        self.add_object(self.player)

        # Create coins
        for i in range(5):
            coin = Sprite(f"Coin_{i}")
            coin.create_colored_circle(15, Color.YELLOW)
            coin.transform.position = Vector2(
                random.randint(50, 750),
                random.randint(50, 550)
            )
            collider = BoxCollider(30, 30)
            collider.is_trigger = True
            coin.add_component(collider)
            coin.add_tag("coin")
            self.coins.append(coin)
            self.add_object(coin)

        # Create enemies
        for i in range(3):
            enemy = Sprite(f"Enemy_{i}")
            enemy.create_colored_rect(25, 25, Color.RED)
            enemy.transform.position = Vector2(
                random.randint(100, 700),
                random.randint(100, 500)
            )

            enemy_rb = Rigidbody()
            enemy.add_component(enemy_rb)
            enemy.add_component(BoxCollider(25, 25))
            enemy.add_component(Enemy(random.randint(80, 150)))
            enemy.add_tag("enemy")
            self.enemies.append(enemy)
            self.add_object(enemy)

    def on_collision(self, obj1, obj2):
        """Handle collisions between objects"""
        # Player collecting coins
        if (obj1 == self.player and obj2.has_tag("coin")) or \
           (obj2 == self.player and obj1.has_tag("coin")):
            coin = obj2 if obj1 == self.player else obj1
            if coin in self.coins:
                self.coin_collector.collect_coin()
                self.remove_object(coin)
                self.coins.remove(coin)

                # Check win condition
                if len(self.coins) == 0:
                    print("You collected all coins! You win!")

        # Player hitting enemies
        elif (obj1 == self.player and obj2.has_tag("enemy")) or \
             (obj2 == self.player and obj1.has_tag("enemy")):
            print("Game Over! You hit an enemy!")
            # Reset player position
            self.player.transform.position = Vector2(400, 300)

    def render(self, renderer):
        super().render(renderer)

        # Draw UI
        score_text = f"Score: {self.coin_collector.score if self.coin_collector else 0}"
        renderer.draw_text(score_text, Vector2(10, 10), Color.WHITE, 24)

        coins_left = len(self.coins)
        coins_text = f"Coins Left: {coins_left}"
        renderer.draw_text(coins_text, Vector2(10, 40), Color.WHITE, 24)

        if coins_left == 0:
            renderer.draw_text("YOU WIN! Press R to restart", Vector2(250, 300), Color.GREEN, 32)

        # Instructions
        renderer.draw_text("Use WASD or Arrow Keys to move", Vector2(10, 570), Color.WHITE, 16)
        renderer.draw_text("Collect yellow coins, avoid red enemies!", Vector2(10, 590), Color.WHITE, 16)

def init_game():
    """Initialize the game"""
    # Create and register the main scene
    game_scene = GameScene()
    voidray.register_scene("game", game_scene)
    voidray.set_scene("game")

def main():
    """Main entry point"""
    # Configure the engine
    voidray.configure(800, 600, "VoidRay Tutorial Game", 60)

    # Set initialization callback
    voidray.on_init(init_game)

    # Start the engine
    voidray.start()

if __name__ == "__main__":
    main()