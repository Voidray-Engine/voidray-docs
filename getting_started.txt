
========================================
VoidRay 2.5-stable - Getting Started Guide
========================================

Welcome to VoidRay, the most powerful and beginner-friendly 2D/2.5D game engine!
This guide will get you creating amazing games in just 10 minutes.

========================================
📋 TABLE OF CONTENTS
========================================

1. What is VoidRay?
2. Quick Setup (5 minutes)
3. Your First Game (5 minutes)
4. Understanding the Engine
5. Next Steps
6. Common Issues & Solutions

========================================
🌟 WHAT IS VOIDRAY?
========================================

VoidRay 2.5-stable is a professional-grade game engine that makes creating games
as simple as writing Python code. No complex editors, no confusing interfaces -
just pure code-to-game magic!

Key Features:
✅ 2D and 2.5D rendering with depth layers
✅ Advanced physics engine with realistic collisions
✅ Component-based architecture (like Unity)
✅ Professional audio system with 3D positioning
✅ Smart asset management and streaming
✅ Built-in visual editor with syntax highlighting
✅ Cross-platform support (Windows, macOS, Linux)
✅ Performance optimized for indie and professional games

========================================
⚡ QUICK SETUP (5 MINUTES)
========================================

OPTION 3: Visual Editor
----------------------
Launch the advanced code editor:
   python gui_editor.py

This gives you:
- Syntax highlighting for Python and VoidRay API
- Live error checking
- Project templates
- Asset browser
- Debug tools

========================================
🎮 YOUR FIRST GAME (5 MINUTES)
========================================

Let's create a complete game with physics, collision, and controls!

STEP 1: Create the file
-----------------------
Create a new file called "my_first_game.py" with this code:

```python
import voidray
from voidray import Scene, Sprite, Vector2, Keys, BoxCollider, Rigidbody
from voidray.graphics.renderer import Color

class Player(Sprite):
    """A player that can move and jump."""
    
    def __init__(self):
        super().__init__("Player")
        # Create a blue square
        self.create_colored_rect(40, 40, Color.BLUE)
        self.speed = 300
        
        # Add physics for realistic movement
        self.rigidbody = Rigidbody()
        self.rigidbody.set_mass(1.0)
        self.rigidbody.set_drag(0.1)  # Air resistance
        self.add_component(self.rigidbody)
        
        # Add collision detection
        self.collider = BoxCollider(40, 40)
        self.add_component(self.collider)
        
        self.on_ground = False

    def update(self, delta_time):
        super().update(delta_time)
        
        # Get input from the engine
        input_manager = voidray.get_engine().input_manager
        
        # Horizontal movement
        if input_manager.is_key_pressed(Keys.LEFT):
            self.rigidbody.add_force(Vector2(-self.speed * 10, 0))
        if input_manager.is_key_pressed(Keys.RIGHT):
            self.rigidbody.add_force(Vector2(self.speed * 10, 0))
        
        # Jumping (only when on ground)
        if input_manager.is_key_just_pressed(Keys.SPACE) and self.on_ground:
            self.rigidbody.add_impulse(Vector2(0, -600))
            self.on_ground = False

class Platform(Sprite):
    """A static platform for jumping."""
    
    def __init__(self, width=100, height=20):
        super().__init__("Platform")
        self.create_colored_rect(width, height, Color.GREEN)
        
        # Add collision (no physics - static object)
        self.collider = BoxCollider(width, height)
        self.collider.on_collision = self.handle_collision
        self.add_component(self.collider)
    
    def handle_collision(self, other, collision_info):
        # If player lands on top, they're on ground
        if hasattr(other.game_object, 'on_ground'):
            if collision_info.normal.y < 0:  # Collision from above
                other.game_object.on_ground = True

class GameScene(Scene):
    """The main game scene."""
    
    def __init__(self):
        super().__init__("My First Game")
        
    def on_enter(self):
        super().on_enter()
        
        # Create player
        self.player = Player()
        self.player.transform.position = Vector2(100, 300)
        self.add_object(self.player)
        
        # Create platforms
        platforms = [
            (Vector2(200, 500), 200, 20),  # Ground platform
            (Vector2(400, 400), 100, 20),  # Jump platform
            (Vector2(600, 300), 100, 20),  # Higher platform
        ]
        
        for pos, width, height in platforms:
            platform = Platform(width, height)
            platform.transform.position = pos
            self.add_object(platform)
        
        print("🎮 Game Started!")
        print("Use arrow keys to move, SPACE to jump!")
        print("Press ESC to quit")
    
    def update(self, delta_time):
        super().update(delta_time)
        
        # Check for quit
        if voidray.get_engine().input_manager.is_key_just_pressed(Keys.ESCAPE):
            voidray.stop()
    
    def render(self, renderer):
        super().render(renderer)
        
        # Draw game title
        renderer.draw_text("My First VoidRay Game!", Vector2(10, 10), Color.WHITE, 24)
        renderer.draw_text("Arrow keys to move, SPACE to jump, ESC to quit", 
                          Vector2(10, 40), Color.LIGHT_GRAY, 16)
        
        # Show FPS
        fps = voidray.get_engine().get_fps()
        renderer.draw_text(f"FPS: {fps:.1f}", Vector2(10, 70), Color.YELLOW, 16)

def init_game():
    """Initialize the game."""
    # Set up realistic gravity
    engine = voidray.get_engine()
    engine.physics_system.set_gravity(800)
    
    # Create and start the scene
    scene = GameScene()
    voidray.register_scene("game", scene)
    voidray.set_scene("game")

def main():
    """Main function - entry point."""
    print("🚀 Starting My First VoidRay Game...")
    
    # Configure the engine
    voidray.configure(
        width=800, 
        height=600, 
        title="My First VoidRay Game", 
        fps=60
    )
    
    # Set up the game
    voidray.on_init(init_game)
    
    # Start the engine (this runs the game loop)
    voidray.start()

if __name__ == "__main__":
    main()
```

STEP 2: Run your game
--------------------
In terminal/command prompt:
   python my_first_game.py

Or in the VoidRay editor:
1. Open my_first_game.py
2. Click "Run Game" button

STEP 3: Play and experiment!
---------------------------
- Use arrow keys to move your blue square
- Press SPACE to jump between platforms
- Press ESC to quit

Congratulations! You just created a complete platformer game with:
✅ Player movement and jumping
✅ Realistic physics simulation
✅ Collision detection
✅ Multiple platforms
✅ Professional game loop

========================================
🏗️ UNDERSTANDING THE ENGINE
========================================

VoidRay uses a component-based architecture that makes games modular and easy to expand.

CORE CONCEPTS:
--------------

1. ENGINE
   - The central system that runs everything
   - Handles rendering, input, physics, audio
   - Access with: voidray.get_engine()

2. SCENES
   - Containers for your game objects
   - Like levels or game states (menu, gameplay, etc.)
   - Override methods: on_enter(), on_exit(), update(), render()

3. GAME OBJECTS & SPRITES
   - Everything in your game is a GameObject
   - Sprites are GameObjects with visual representation
   - Have Transform (position, rotation, scale)

4. COMPONENTS
   - Modular pieces of functionality
   - Rigidbody: Physics simulation (mass, velocity, forces)
   - Colliders: Collision detection (BoxCollider, CircleCollider)
   - Custom: Create your own behavior components

5. PHYSICS SYSTEM
   - Realistic physics simulation
   - Gravity, velocity, acceleration, drag
   - Collision detection and response
   - Material properties (bounciness, friction)

6. INPUT SYSTEM
   - Keyboard, mouse, gamepad support
   - Frame-perfect input detection
   - is_key_pressed() vs is_key_just_pressed()

7. AUDIO SYSTEM
   - Music and sound effects
   - 3D positioned audio with distance attenuation
   - Multiple format support (WAV, MP3, OGG)
   - Real-time audio effects

GAME LOOP STRUCTURE:
-------------------
```
1. Initialize (once)
   - Configure engine
   - Create scenes
   - Set up initial game state

2. Update (every frame)
   - Process input
   - Update game logic
   - Run physics simulation
   - Update audio

3. Render (every frame)
   - Clear screen
   - Draw all sprites
   - Draw UI elements
   - Present to screen

4. Cleanup (when quitting)
   - Save game data
   - Release resources
   - Shut down systems
```

========================================
🚀 NEXT STEPS
========================================

Now that you have your first game running, here's what to explore next:

IMMEDIATE NEXT STEPS:
--------------------
1. Modify your game:
   - Change colors: Color.RED, Color.YELLOW, Color.PURPLE
   - Add more platforms at different positions
   - Experiment with physics: change gravity, mass, drag
   - Add more players or moving objects

2. Try the examples:
   - examples/enhanced_demo.py - Advanced features showcase
   - examples/platformer_demo.py - Complete platformer
   - examples/space_shooter.py - Action game with effects
   - examples/asteroids.py - Classic arcade game

3. Use the Visual Editor:
   - Run: python gui_editor.py
   - Try different templates
   - Use syntax highlighting
   - Debug with live error checking

LEARNING PATH:
--------------
Week 1: Master the Basics
- Complete all example games
- Understand scenes and game objects
- Learn input handling
- Practice with components

Week 2: Advanced Features
- Physics system deep dive
- Audio integration
- Asset management
- Performance optimization

Week 3: Create Your Game
- Plan your game concept
- Build core mechanics
- Add polish and effects
- Test and iterate

RESOURCES:
----------
📖 docs/api_reference.txt - Complete function documentation
⚡ docs/physics_guide.txt - Master realistic physics
🎮 docs/tutorial_basic_game.txt - Step-by-step tutorials
💡 examples/ folder - Working code samples
🔧 GUI Editor - Visual development environment

COMMUNITY:
----------
🐛 GitHub Issues - Report bugs and request features
💬 Discussions - Ask questions and share projects
🎯 Showcase - Show off your games
📚 Wiki - Community tutorials and tips

========================================
🛠️ COMMON ISSUES & SOLUTIONS
========================================

ISSUE: "pygame not found" or import errors
SOLUTION: 
- VoidRay auto-installs dependencies
- If issues persist, manually install: pip install pygame
- On Replit: Just click Run, everything installs automatically

ISSUE: Game runs too slow or too fast
SOLUTION:
- Use delta_time for all movement: position += velocity * delta_time
- Check FPS with: voidray.get_engine().get_fps()
- Optimize by reducing number of objects or using object pooling

ISSUE: Collisions not working
SOLUTION:
- Make sure both objects have colliders: add_component(BoxCollider(...))
- Check that colliders are the right size
- Verify objects are in the same scene
- Use debug overlay to visualize colliders

ISSUE: Physics feels unrealistic
SOLUTION:
- Adjust gravity: engine.physics_system.set_gravity(800)
- Set proper mass values: rigidbody.set_mass(1.0)
- Add drag for air resistance: rigidbody.set_drag(0.1)
- Use appropriate forces vs impulses

ISSUE: Input not responsive
SOLUTION:
- Use is_key_just_pressed() for single actions (jumping)
- Use is_key_pressed() for continuous actions (moving)
- Check key constants: Keys.SPACE, Keys.LEFT, Keys.RIGHT
- Ensure input is checked in update() method

ISSUE: Audio not playing
SOLUTION:
- Check audio file formats (WAV, MP3, OGG supported)
- Verify file paths are correct
- On some systems, audio initialization may fail - check console output
- Use try/catch blocks around audio loading

ISSUE: Game crashes on startup
SOLUTION:
- Check Python version (3.8+ required, 3.12+ recommended)
- Verify all required files are present
- Look at error messages in console
- Try running examples first to verify engine works

PERFORMANCE TIPS:
----------------
✅ Use object pooling for frequently created/destroyed objects
✅ Limit number of active physics objects
✅ Use appropriate collision shapes (boxes faster than circles)
✅ Batch similar rendering operations
✅ Profile with built-in debug overlay
✅ Stream large assets instead of loading all at once

========================================
🎯 QUICK REFERENCE
========================================

ESSENTIAL IMPORTS:
```python
import voidray
from voidray import Scene, Sprite, Vector2, Keys
from voidray import BoxCollider, CircleCollider, Rigidbody
from voidray.graphics.renderer import Color
```

BASIC GAME STRUCTURE:
```python
def init_game():
    scene = MyScene()
    voidray.register_scene("main", scene)
    voidray.set_scene("main")

def main():
    voidray.configure(800, 600, "My Game", 60)
    voidray.on_init(init_game)
    voidray.start()
```

COMMON PATTERNS:
```python
# Movement with physics
self.rigidbody.add_force(Vector2(100, 0))

# Jumping
if input_manager.is_key_just_pressed(Keys.SPACE):
    self.rigidbody.add_impulse(Vector2(0, -500))

# Collision detection
def handle_collision(self, other, collision_info):
    if other.game_object.name == "Enemy":
        self.take_damage()

# Frame-rate independent movement
self.position += self.velocity * delta_time
```

KEY METHODS:
- voidray.configure(width, height, title, fps)
- voidray.start() / voidray.stop()
- voidray.get_engine()
- scene.add_object(game_object)
- sprite.create_colored_rect(width, height, color)
- rigidbody.add_force(vector) / add_impulse(vector)

========================================
🏆 CONGRATULATIONS!
========================================

You now have everything you need to start creating amazing games with VoidRay!

Remember:
- Start simple and build complexity gradually
- Experiment with the examples
- Use the visual editor for faster development  
- Don't hesitate to ask questions in the community
- Most importantly: Have fun creating!

Your game development journey starts now. What will you create?

🚀 Happy Game Development!
   - The VoidRay Team

========================================
