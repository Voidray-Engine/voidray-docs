
========================================
VoidRay 2.5-stable API Reference
========================================

Complete reference for all VoidRay classes, functions, and systems.
Last updated: 2025 (Version 2.5-stable)

========================================
📋 TABLE OF CONTENTS
========================================

1. Core Engine API
2. Scene Management
3. Game Objects & Components  
4. Graphics & Rendering
5. Physics System
6. Input Management
7. Audio System
8. Math & Utilities
9. Asset Management
10. Debug & Performance

========================================
🎮 CORE ENGINE API
========================================

voidray Module Functions
-----------------------

configure(width: int, height: int, title: str, fps: int = 60, **kwargs)
    Configure the game engine before starting.
    
    Parameters:
        width (int): Window width in pixels
        height (int): Window height in pixels  
        title (str): Window title
        fps (int): Target frames per second (default: 60)
        
    Optional Parameters:
        fullscreen (bool): Start in fullscreen mode (default: False)
        resizable (bool): Allow window resizing (default: False)
        vsync (bool): Enable vertical sync (default: True)
        anti_aliasing (bool): Enable anti-aliasing (default: True)
        audio_enabled (bool): Enable audio system (default: True)
        debug_mode (bool): Enable debug features (default: False)
    
    Example:
        voidray.configure(1024, 768, "My Game", 60, fullscreen=False)

start()
    Start the game engine and begin the main game loop.
    This function blocks until the game exits.
    
    Note: Must call configure() before start()

stop()
    Stop the game engine and exit the application.
    Can be called from anywhere in your game code.

get_engine() -> Engine
    Get reference to the main engine instance.
    
    Returns:
        Engine: The main engine object
    
    Example:
        engine = voidray.get_engine()
        fps = engine.get_fps()

on_init(callback: callable)
    Register a function to call when the engine initializes.
    
    Parameters:
        callback: Function to call (takes no parameters)
    
    Example:
        def init_my_game():
            # Game initialization code here
            pass
        voidray.on_init(init_my_game)

on_update(callback: callable)
    Register a function to call every frame during update.
    
    Parameters:
        callback: Function to call with delta_time parameter
    
    Example:
        def update_game(delta_time):
            # Global game logic here
            pass
        voidray.on_update(update_game)

on_render(callback: callable)
    Register a function to call every frame during render.
    
    Parameters:
        callback: Function to call (takes no parameters)
    
    Example:
        def render_ui():
            # Custom rendering code here
            pass
        voidray.on_render(render_ui)

register_scene(name: str, scene: Scene)
    Register a scene with the engine.
    
    Parameters:
        name (str): Unique name for the scene
        scene (Scene): Scene object to register
    
    Example:
        game_scene = GameScene()
        voidray.register_scene("game", game_scene)

set_scene(name: str)
    Switch to a registered scene.
    
    Parameters:
        name (str): Name of the scene to switch to
    
    Example:
        voidray.set_scene("game")

Engine Class
-----------

Properties:
    width (int): Current window width
    height (int): Current window height
    fps_target (int): Target FPS
    is_running (bool): Whether engine is running
    
    # System References
    input_manager (InputManager): Input handling system
    physics_system (PhysicsSystem): Physics simulation system
    audio_manager (AudioManager): Audio playback system
    asset_loader (AssetLoader): Asset loading system
    camera (Camera): Main camera object
    renderer (Renderer): Rendering system

Methods:

get_fps() -> float
    Get current frames per second.
    
    Returns:
        float: Current FPS

get_delta_time() -> float
    Get time elapsed since last frame in seconds.
    
    Returns:
        float: Delta time in seconds

get_time() -> float
    Get total time since engine started in seconds.
    
    Returns:
        float: Total runtime in seconds

set_fps_target(fps: int)
    Change target FPS.
    
    Parameters:
        fps (int): New target FPS

pause()
    Pause the game engine (stops update, continues render).

resume()
    Resume the paused game engine.

is_paused() -> bool
    Check if engine is currently paused.
    
    Returns:
        bool: True if paused

========================================
🎬 SCENE MANAGEMENT
========================================

Scene Class
----------

Base class for all game scenes. Override methods to customize behavior.

Constructor:
    Scene(name: str)
        Create a new scene.
        
        Parameters:
            name (str): Scene name for identification

Properties:
    name (str): Scene name
    objects (list): List of all GameObjects in scene
    active (bool): Whether scene is currently active

Methods:

on_enter()
    Called when scene becomes active.
    Override to initialize scene-specific objects and state.
    
    Example:
        def on_enter(self):
            super().on_enter()
            self.player = Player()
            self.add_object(self.player)

on_exit()  
    Called when leaving scene.
    Override to clean up scene-specific resources.
    
    Example:
        def on_exit(self):
            super().on_exit()
            # Save game state
            self.save_progress()

update(delta_time: float)
    Called every frame to update scene logic.
    
    Parameters:
        delta_time (float): Time since last frame
    
    Example:
        def update(self, delta_time):
            super().update(delta_time)
            # Scene-specific update logic
            self.check_win_condition()

render(renderer: Renderer)
    Called every frame to render scene.
    
    Parameters:
        renderer (Renderer): Rendering system
    
    Example:
        def render(self, renderer):
            super().render(renderer)
            # Custom rendering
            renderer.draw_text("Score: " + str(self.score), 
                             Vector2(10, 10), Color.WHITE)

add_object(game_object: GameObject)
    Add a GameObject to this scene.
    
    Parameters:
        game_object (GameObject): Object to add

remove_object(game_object: GameObject)
    Remove a GameObject from this scene.
    
    Parameters:
        game_object (GameObject): Object to remove

find_object(name: str) -> GameObject
    Find a GameObject by name.
    
    Parameters:
        name (str): Name of object to find
    
    Returns:
        GameObject: Found object or None

find_objects_by_tag(tag: str) -> list
    Find all GameObjects with specific tag.
    
    Parameters:
        tag (str): Tag to search for
    
    Returns:
        list: List of matching GameObjects

========================================
🎯 GAME OBJECTS & COMPONENTS
========================================

GameObject Class
---------------

Base class for all entities in your game.

Constructor:
    GameObject(name: str, tag: str = "default")
        Create a new GameObject.
        
        Parameters:
            name (str): Object name for identification
            tag (str): Optional tag for grouping objects

Properties:
    name (str): Object name
    tag (str): Object tag
    transform (Transform): Position, rotation, scale
    active (bool): Whether object is active
    components (dict): Dictionary of attached components

Methods:

add_component(component: Component)
    Add a component to this GameObject.
    
    Parameters:
        component (Component): Component to add
    
    Example:
        rigidbody = Rigidbody()
        self.add_component(rigidbody)

get_component(component_type: type) -> Component
    Get component of specific type.
    
    Parameters:
        component_type (type): Type of component to get
    
    Returns:
        Component: Found component or None
    
    Example:
        rb = self.get_component(Rigidbody)
        if rb:
            rb.add_force(Vector2(100, 0))

remove_component(component_type: type)
    Remove component of specific type.
    
    Parameters:
        component_type (type): Type of component to remove

has_component(component_type: type) -> bool
    Check if object has component of specific type.
    
    Parameters:
        component_type (type): Type to check for
    
    Returns:
        bool: True if component exists

update(delta_time: float)
    Update this object (called by scene).
    Override for custom behavior.
    
    Parameters:
        delta_time (float): Time since last frame

render(renderer: Renderer)
    Render this object (called by scene).
    Override for custom rendering.
    
    Parameters:
        renderer (Renderer): Rendering system

destroy()
    Mark this object for destruction.
    Will be removed from scene on next frame.

Sprite Class
-----------

GameObject with visual representation. Inherits from GameObject.

Constructor:
    Sprite(name: str, tag: str = "default")
        Create a new Sprite.

Additional Properties:
    texture (Texture): Current sprite texture
    color (Color): Sprite tint color
    alpha (float): Transparency (0.0 - 1.0)
    flip_x (bool): Flip horizontally
    flip_y (bool): Flip vertically
    layer (int): Rendering layer (higher = front)

Methods:

create_colored_rect(width: int, height: int, color: Color)
    Create a colored rectangle sprite.
    
    Parameters:
        width (int): Rectangle width
        height (int): Rectangle height
        color (Color): Rectangle color
    
    Example:
        self.create_colored_rect(50, 50, Color.RED)

create_colored_circle(radius: int, color: Color)
    Create a colored circle sprite.
    
    Parameters:
        radius (int): Circle radius
        color (Color): Circle color
    
    Example:
        self.create_colored_circle(25, Color.BLUE)

load_texture(file_path: str)
    Load texture from file.
    
    Parameters:
        file_path (str): Path to image file
    
    Example:
        self.load_texture("assets/player.png")

set_color(color: Color)
    Set sprite tint color.
    
    Parameters:
        color (Color): New tint color

set_alpha(alpha: float)
    Set sprite transparency.
    
    Parameters:
        alpha (float): Alpha value (0.0 = transparent, 1.0 = opaque)

Component Class
--------------

Base class for all components. Components add behavior to GameObjects.

Constructor:
    Component()
        Create a new component.

Properties:
    game_object (GameObject): GameObject this component is attached to
    enabled (bool): Whether component is active

Methods:

start()
    Called once when component is first added.
    Override for initialization logic.

update(delta_time: float)
    Called every frame if component is enabled.
    Override for component behavior.
    
    Parameters:
        delta_time (float): Time since last frame

on_destroy()
    Called when component is removed or GameObject is destroyed.
    Override for cleanup logic.

========================================
🎨 GRAPHICS & RENDERING
========================================

Renderer Class
--------------

Handles all drawing operations.

Drawing Methods:

draw_sprite(sprite: Sprite, position: Vector2, rotation: float = 0, scale: Vector2 = None)
    Draw a sprite at specified position.
    
    Parameters:
        sprite (Sprite): Sprite to draw
        position (Vector2): World position
        rotation (float): Rotation in degrees
        scale (Vector2): Scale factor (default: Vector2(1, 1))

draw_rect(position: Vector2, size: Vector2, color: Color, filled: bool = True)
    Draw a rectangle.
    
    Parameters:
        position (Vector2): Top-left corner
        size (Vector2): Width and height
        color (Color): Rectangle color
        filled (bool): Fill rectangle or just outline
    
    Example:
        renderer.draw_rect(Vector2(100, 100), Vector2(50, 30), Color.RED)

draw_circle(center: Vector2, radius: float, color: Color, filled: bool = True)
    Draw a circle.
    
    Parameters:
        center (Vector2): Circle center
        radius (float): Circle radius
        color (Color): Circle color
        filled (bool): Fill circle or just outline

draw_line(start: Vector2, end: Vector2, color: Color, width: int = 1)
    Draw a line.
    
    Parameters:
        start (Vector2): Line start point
        end (Vector2): Line end point
        color (Color): Line color
        width (int): Line thickness

draw_text(text: str, position: Vector2, color: Color, size: int = 16, font: str = None)
    Draw text.
    
    Parameters:
        text (str): Text to draw
        position (Vector2): Text position (top-left)
        color (Color): Text color
        size (int): Font size
        font (str): Font name (optional)
    
    Example:
        renderer.draw_text("Score: 100", Vector2(10, 10), Color.WHITE, 24)

Screen Methods:

clear(color: Color = Color.BLACK)
    Clear screen with specified color.
    
    Parameters:
        color (Color): Clear color

present()
    Present rendered frame to screen.
    Called automatically by engine.

get_screen_size() -> Vector2
    Get current screen dimensions.
    
    Returns:
        Vector2: Screen width and height

Color Class
----------

Represents RGBA colors.

Constructor:
    Color(r: int, g: int, b: int, a: int = 255)
        Create color from RGBA values.
        
        Parameters:
            r (int): Red component (0-255)
            g (int): Green component (0-255)
            b (int): Blue component (0-255)
            a (int): Alpha/transparency (0-255, default: 255)

Predefined Colors:
    Color.BLACK = Color(0, 0, 0)
    Color.WHITE = Color(255, 255, 255)
    Color.RED = Color(255, 0, 0)
    Color.GREEN = Color(0, 255, 0)
    Color.BLUE = Color(0, 0, 255)
    Color.YELLOW = Color(255, 255, 0)
    Color.CYAN = Color(0, 255, 255)
    Color.MAGENTA = Color(255, 0, 255)
    Color.GRAY = Color(128, 128, 128)
    Color.LIGHT_GRAY = Color(192, 192, 192)
    Color.DARK_GRAY = Color(64, 64, 64)
    Color.ORANGE = Color(255, 165, 0)
    Color.PURPLE = Color(128, 0, 128)
    Color.BROWN = Color(165, 42, 42)
    Color.PINK = Color(255, 192, 203)

Methods:

lerp(other: Color, t: float) -> Color
    Linear interpolate between colors.
    
    Parameters:
        other (Color): Target color
        t (float): Interpolation factor (0.0 - 1.0)
    
    Returns:
        Color: Interpolated color

Camera Class
-----------

Controls the view into the game world.

Constructor:
    Camera()
        Create a new camera.

Properties:
    position (Vector2): Camera world position
    zoom (float): Zoom level (1.0 = normal, 2.0 = 2x zoom)
    rotation (float): Camera rotation in degrees
    follow_target (GameObject): Object to follow (optional)
    smoothing (float): Follow smoothing (0.0 = instant, 1.0 = very smooth)
    bounds (Rect): Camera movement bounds (optional)

Methods:

set_position(position: Vector2)
    Set camera position.
    
    Parameters:
        position (Vector2): New camera position

set_zoom(zoom: float)
    Set camera zoom level.
    
    Parameters:
        zoom (float): Zoom factor

world_to_screen(world_pos: Vector2) -> Vector2
    Convert world position to screen coordinates.
    
    Parameters:
        world_pos (Vector2): World position
    
    Returns:
        Vector2: Screen coordinates

screen_to_world(screen_pos: Vector2) -> Vector2
    Convert screen position to world coordinates.
    
    Parameters:
        screen_pos (Vector2): Screen position
    
    Returns:
        Vector2: World coordinates

shake(intensity: float, duration: float)
    Apply camera shake effect.
    
    Parameters:
        intensity (float): Shake strength
        duration (float): Shake duration in seconds

========================================
⚡ PHYSICS SYSTEM
========================================

PhysicsSystem Class
------------------

Manages physics simulation for the entire world.

Methods:

set_gravity(gravity: float)
    Set world gravity.
    
    Parameters:
        gravity (float): Gravity force (positive = downward)
    
    Example:
        engine.physics_system.set_gravity(800)

get_gravity() -> float
    Get current gravity value.
    
    Returns:
        float: Current gravity

set_time_scale(scale: float)
    Set physics time scale (for slow motion effects).
    
    Parameters:
        scale (float): Time scale (1.0 = normal, 0.5 = half speed)

raycast(origin: Vector2, direction: Vector2, distance: float) -> RaycastHit
    Cast a ray and check for collisions.
    
    Parameters:
        origin (Vector2): Ray starting point
        direction (Vector2): Ray direction (normalized)
        distance (float): Maximum ray distance
    
    Returns:
        RaycastHit: Information about hit object (or None)

Rigidbody Component
------------------

Adds physics simulation to GameObjects.

Constructor:
    Rigidbody()
        Create a new rigidbody.

Properties:
    mass (float): Object mass (affects force response)
    drag (float): Linear drag/air resistance (0.0 - 1.0)
    angular_drag (float): Rotational drag
    gravity_scale (float): How much gravity affects this object
    velocity (Vector2): Current velocity
    angular_velocity (float): Current rotational velocity
    is_kinematic (bool): If True, not affected by forces
    freeze_rotation (bool): Prevent rotation
    freeze_position_x (bool): Prevent X movement
    freeze_position_y (bool): Prevent Y movement

Methods:

set_mass(mass: float)
    Set object mass.
    
    Parameters:
        mass (float): New mass value

set_drag(drag: float)
    Set linear drag.
    
    Parameters:
        drag (float): Drag coefficient (0.0 - 1.0)

set_bounciness(bounciness: float)
    Set collision bounciness.
    
    Parameters:
        bounciness (float): Bounce factor (0.0 - 1.0)

add_force(force: Vector2)
    Apply continuous force.
    
    Parameters:
        force (Vector2): Force to apply
    
    Example:
        rigidbody.add_force(Vector2(100, 0))  # Push right

add_impulse(impulse: Vector2)
    Apply instant impulse (like jumping).
    
    Parameters:
        impulse (Vector2): Impulse to apply
    
    Example:
        rigidbody.add_impulse(Vector2(0, -500))  # Jump up

set_velocity(velocity: Vector2)
    Set velocity directly.
    
    Parameters:
        velocity (Vector2): New velocity

add_torque(torque: float)
    Apply rotational force.
    
    Parameters:
        torque (float): Torque to apply

Collider Components
------------------

Base class for all collision shapes.

BoxCollider(width: float, height: float)
    Rectangular collision shape.
    
    Parameters:
        width (float): Box width
        height (float): Box height

CircleCollider(radius: float)
    Circular collision shape.
    
    Parameters:
        radius (float): Circle radius

Collider Properties:
    is_trigger (bool): If True, doesn't block movement but triggers events
    offset (Vector2): Offset from GameObject position
    on_collision (callable): Function to call on collision

Collision Events:

on_collision(other: Collider, collision_info: CollisionInfo)
    Called when collision occurs.
    
    Parameters:
        other (Collider): The other collider
        collision_info (CollisionInfo): Collision details
    
    Example:
        def handle_collision(self, other, collision_info):
            if other.game_object.tag == "Enemy":
                self.take_damage()
        
        self.collider.on_collision = handle_collision

CollisionInfo Class
------------------

Contains information about a collision.

Properties:
    point (Vector2): Collision point in world space
    normal (Vector2): Collision normal (direction of separation)
    depth (float): Collision penetration depth
    relative_velocity (Vector2): Relative velocity of colliding objects

========================================
🎮 INPUT MANAGEMENT
========================================

InputManager Class
-----------------

Handles all input from keyboard, mouse, and gamepad.

Keyboard Methods:

is_key_pressed(key: Keys) -> bool
    Check if key is currently held down.
    
    Parameters:
        key (Keys): Key to check
    
    Returns:
        bool: True if key is pressed
    
    Example:
        if input_manager.is_key_pressed(Keys.SPACE):
            player.jump()

is_key_just_pressed(key: Keys) -> bool
    Check if key was just pressed this frame.
    
    Parameters:
        key (Keys): Key to check
    
    Returns:
        bool: True if key was just pressed
    
    Example:
        if input_manager.is_key_just_pressed(Keys.SPACE):
            player.shoot()

is_key_just_released(key: Keys) -> bool
    Check if key was just released this frame.
    
    Parameters:
        key (Keys): Key to check
    
    Returns:
        bool: True if key was just released

Mouse Methods:

get_mouse_position() -> Vector2
    Get current mouse position in screen coordinates.
    
    Returns:
        Vector2: Mouse position

get_mouse_world_position() -> Vector2
    Get mouse position in world coordinates.
    
    Returns:
        Vector2: Mouse world position

is_mouse_button_pressed(button: MouseButtons) -> bool
    Check if mouse button is held down.
    
    Parameters:
        button (MouseButtons): Button to check
    
    Returns:
        bool: True if button is pressed

is_mouse_button_just_pressed(button: MouseButtons) -> bool
    Check if mouse button was just pressed.
    
    Parameters:
        button (MouseButtons): Button to check
    
    Returns:
        bool: True if button was just pressed

get_mouse_wheel_delta() -> float
    Get mouse wheel movement this frame.
    
    Returns:
        float: Wheel delta (positive = up, negative = down)

Keys Enum
--------

Key constants for keyboard input:

Movement:
    Keys.LEFT, Keys.RIGHT, Keys.UP, Keys.DOWN
    Keys.W, Keys.A, Keys.S, Keys.D

Action:
    Keys.SPACE, Keys.ENTER, Keys.ESCAPE
    Keys.SHIFT, Keys.CTRL, Keys.ALT

Letters:
    Keys.A through Keys.Z

Numbers:
    Keys.KEY_0 through Keys.KEY_9
    Keys.NUM_0 through Keys.NUM_9 (numpad)

Function:
    Keys.F1 through Keys.F12

MouseButtons Enum
----------------

Mouse button constants:
    MouseButtons.LEFT
    MouseButtons.RIGHT  
    MouseButtons.MIDDLE

========================================
🎵 AUDIO SYSTEM
========================================

AudioManager Class
-----------------

Handles music and sound effect playback.

Music Methods:

play_music(file_path: str, volume: float = 1.0, loop: bool = True)
    Play background music.
    
    Parameters:
        file_path (str): Path to music file
        volume (float): Volume level (0.0 - 1.0)
        loop (bool): Whether to loop music
    
    Example:
        audio.play_music("assets/background.mp3", 0.7, True)

stop_music()
    Stop currently playing music.

pause_music()
    Pause music playback.

resume_music()
    Resume paused music.

set_music_volume(volume: float)
    Set music volume.
    
    Parameters:
        volume (float): Volume level (0.0 - 1.0)

is_music_playing() -> bool
    Check if music is currently playing.
    
    Returns:
        bool: True if music is playing

Sound Effect Methods:

play_sound(file_path: str, volume: float = 1.0) -> int
    Play a sound effect.
    
    Parameters:
        file_path (str): Path to sound file
        volume (float): Volume level (0.0 - 1.0)
    
    Returns:
        int: Sound ID for controlling playback
    
    Example:
        sound_id = audio.play_sound("assets/jump.wav", 0.8)

stop_sound(sound_id: int)
    Stop a specific sound.
    
    Parameters:
        sound_id (int): ID returned by play_sound()

stop_all_sounds()
    Stop all currently playing sounds.

3D Audio Methods:

play_sound_3d(file_path: str, position: Vector2, volume: float = 1.0, 
              max_distance: float = 1000.0) -> int
    Play positioned 3D sound.
    
    Parameters:
        file_path (str): Path to sound file
        position (Vector2): 3D position of sound
        volume (float): Base volume level
        max_distance (float): Distance at which sound becomes inaudible
    
    Returns:
        int: Sound ID

set_listener_position(position: Vector2)
    Set 3D audio listener position (usually camera or player).
    
    Parameters:
        position (Vector2): Listener position

Supported Formats:
    WAV, MP3, OGG

========================================
📐 MATH & UTILITIES
========================================

Vector2 Class
------------

2D vector for positions, velocities, and directions.

Constructor:
    Vector2(x: float = 0, y: float = 0)
        Create a new 2D vector.
        
        Parameters:
            x (float): X component
            y (float): Y component

Properties:
    x (float): X component
    y (float): Y component

Static Properties:
    Vector2.zero = Vector2(0, 0)
    Vector2.one = Vector2(1, 1)
    Vector2.up = Vector2(0, -1)
    Vector2.down = Vector2(0, 1)
    Vector2.left = Vector2(-1, 0)
    Vector2.right = Vector2(1, 0)

Methods:

magnitude() -> float
    Get vector length.
    
    Returns:
        float: Vector magnitude
    
    Example:
        distance = (target_pos - my_pos).magnitude()

normalized() -> Vector2
    Get unit vector in same direction.
    
    Returns:
        Vector2: Normalized vector
    
    Example:
        direction = (target_pos - my_pos).normalized()

dot(other: Vector2) -> float
    Calculate dot product.
    
    Parameters:
        other (Vector2): Other vector
    
    Returns:
        float: Dot product

cross(other: Vector2) -> float
    Calculate cross product (2D returns scalar).
    
    Parameters:
        other (Vector2): Other vector
    
    Returns:
        float: Cross product

lerp(other: Vector2, t: float) -> Vector2
    Linear interpolate between vectors.
    
    Parameters:
        other (Vector2): Target vector
        t (float): Interpolation factor (0.0 - 1.0)
    
    Returns:
        Vector2: Interpolated vector

distance_to(other: Vector2) -> float
    Calculate distance to another point.
    
    Parameters:
        other (Vector2): Other point
    
    Returns:
        float: Distance

angle_to(other: Vector2) -> float
    Calculate angle to another vector in degrees.
    
    Parameters:
        other (Vector2): Other vector
    
    Returns:
        float: Angle in degrees

rotate(degrees: float) -> Vector2
    Rotate vector by specified degrees.
    
    Parameters:
        degrees (float): Rotation angle
    
    Returns:
        Vector2: Rotated vector

Operators:
    + : Vector addition
    - : Vector subtraction  
    * : Scalar multiplication
    / : Scalar division
    == : Equality comparison
    != : Inequality comparison

Transform Class
--------------

Represents position, rotation, and scale of GameObjects.

Constructor:
    Transform()
        Create new transform with default values.

Properties:
    position (Vector2): World position
    rotation (float): Rotation in degrees
    scale (Vector2): Scale factor
    local_position (Vector2): Position relative to parent
    local_rotation (float): Rotation relative to parent
    local_scale (Vector2): Scale relative to parent

Methods:

translate(translation: Vector2)
    Move by specified amount.
    
    Parameters:
        translation (Vector2): Movement vector

rotate(degrees: float)
    Rotate by specified degrees.
    
    Parameters:
        degrees (float): Rotation amount

look_at(target: Vector2)
    Rotate to face target position.
    
    Parameters:
        target (Vector2): Position to face

transform_point(point: Vector2) -> Vector2
    Transform a point from local to world space.
    
    Parameters:
        point (Vector2): Local space point
    
    Returns:
        Vector2: World space point

inverse_transform_point(point: Vector2) -> Vector2
    Transform a point from world to local space.
    
    Parameters:
        point (Vector2): World space point
    
    Returns:
        Vector2: Local space point

========================================
📦 ASSET MANAGEMENT
========================================

AssetLoader Class
----------------

Handles loading and caching of game assets.

Methods:

load_texture(file_path: str) -> Texture
    Load image texture from file.
    
    Parameters:
        file_path (str): Path to image file
    
    Returns:
        Texture: Loaded texture object
    
    Example:
        texture = asset_loader.load_texture("assets/player.png")

load_sound(file_path: str) -> Sound
    Load sound from file.
    
    Parameters:
        file_path (str): Path to sound file
    
    Returns:
        Sound: Loaded sound object

load_font(file_path: str, size: int) -> Font
    Load font from file.
    
    Parameters:
        file_path (str): Path to font file
        size (int): Font size
    
    Returns:
        Font: Loaded font object

preload_assets(asset_list: list)
    Preload multiple assets for faster access.
    
    Parameters:
        asset_list (list): List of file paths to preload
    
    Example:
        assets = ["player.png", "enemy.png", "jump.wav"]
        asset_loader.preload_assets(assets)

unload_asset(file_path: str)
    Unload asset from memory.
    
    Parameters:
        file_path (str): Path of asset to unload

clear_cache()
    Clear all cached assets to free memory.

get_cache_size() -> int
    Get number of cached assets.
    
    Returns:
        int: Number of cached assets

Supported Formats:
    Images: PNG, JPG, GIF, BMP
    Audio: WAV, MP3, OGG
    Fonts: TTF, OTF

========================================
🐛 DEBUG & PERFORMANCE
========================================

Debug Overlay
------------

Real-time debugging information display.

Enable/Disable:
    engine.debug_overlay.enabled = True/False

Toggle with Key:
    Press F3 to toggle debug overlay (default)

Information Displayed:
    - FPS and frame time
    - Active GameObjects count
    - Physics objects count
    - Memory usage
    - Camera position and zoom
    - Mouse position (world and screen)

Performance Profiler
-------------------

Built-in performance monitoring.

Methods:

start_profiling(category: str)
    Start timing a code section.
    
    Parameters:
        category (str): Profile category name
    
    Example:
        engine.profiler.start_profiling("player_update")
        # Player update code here
        engine.profiler.end_profiling("player_update")

end_profiling(category: str)
    End timing a code section.
    
    Parameters:
        category (str): Profile category name

get_profile_data() -> dict
    Get profiling results.
    
    Returns:
        dict: Performance data by category

Log System
---------

Built-in logging for debugging.

Usage:
    engine.logger.info("Game started")
    engine.logger.warning("Low health!")
    engine.logger.error("Failed to load asset")

Log Levels:
    - DEBUG: Detailed information
    - INFO: General information
    - WARNING: Warning messages
    - ERROR: Error messages
    - CRITICAL: Critical errors

========================================
🔧 ADVANCED FEATURES
========================================

Custom Components
----------------

Create your own component classes:

```python
class HealthComponent(Component):
    def __init__(self, max_health=100):
        super().__init__()
        self.max_health = max_health
        self.current_health = max_health
    
    def take_damage(self, damage):
        self.current_health = max(0, self.current_health - damage)
        if self.current_health <= 0:
            self.game_object.destroy()
    
    def heal(self, amount):
        self.current_health = min(self.max_health, 
                                 self.current_health + amount)

# Usage:
health = HealthComponent(100)
player.add_component(health)
```

Object Pooling
-------------

Efficiently manage frequently created/destroyed objects:

```python
class BulletPool:
    def __init__(self, size=50):
        self.pool = []
        for _ in range(size):
            bullet = Bullet()
            bullet.active = False
            self.pool.append(bullet)
    
    def get_bullet(self):
        for bullet in self.pool:
            if not bullet.active:
                bullet.active = True
                return bullet
        return None  # Pool exhausted
    
    def return_bullet(self, bullet):
        bullet.active = False
```

Save System
----------

Save and load game data:

```python
import json

def save_game(data, filename):
    with open(f"saves/{filename}.json", 'w') as f:
        json.dump(data, f)

def load_game(filename):
    try:
        with open(f"saves/{filename}.json", 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return None

# Usage:
save_data = {
    'level': 5,
    'score': 12500,
    'player_position': [100, 200]
}
save_game(save_data, "player_save")
```

========================================
💡 PERFORMANCE TIPS
========================================

Optimization Guidelines:

1. Object Management:
   - Use object pooling for frequently spawned objects
   - Destroy unused objects with destroy()
   - Limit active objects to necessary ones

2. Physics Optimization:
   - Use appropriate collider shapes (boxes are faster than circles)
   - Set objects to sleep when not moving
   - Use is_kinematic for non-physics objects that need collision

3. Rendering Optimization:
   - Use sprite layers efficiently
   - Batch similar sprites together
   - Cull off-screen objects

4. Memory Management:
   - Preload frequently used assets
   - Unload unused assets periodically
   - Use asset streaming for large games

5. Update Loop Optimization:
   - Cache frequently accessed components
   - Use delta_time for frame-rate independence
   - Avoid expensive operations in update loops

========================================
🏆 EXAMPLES & PATTERNS
========================================

Complete Game Object Example:
```python
class Player(Sprite):
    def __init__(self):
        super().__init__("Player")
        self.create_colored_rect(40, 40, Color.BLUE)
        
        # Add components
        self.rigidbody = Rigidbody()
        self.rigidbody.set_mass(1.0)
        self.add_component(self.rigidbody)
        
        self.collider = BoxCollider(40, 40)
        self.collider.on_collision = self.on_collision
        self.add_component(self.collider)
        
        self.health = HealthComponent(100)
        self.add_component(self.health)
        
        # Player properties
        self.speed = 300
        self.jump_force = 500
        self.on_ground = False
    
    def update(self, delta_time):
        super().update(delta_time)
        self.handle_input(delta_time)
        self.check_bounds()
    
    def handle_input(self, delta_time):
        input_mgr = voidray.get_engine().input_manager
        
        # Movement
        if input_mgr.is_key_pressed(Keys.LEFT):
            self.rigidbody.add_force(Vector2(-self.speed * 10, 0))
        if input_mgr.is_key_pressed(Keys.RIGHT):
            self.rigidbody.add_force(Vector2(self.speed * 10, 0))
        
        # Jumping
        if input_mgr.is_key_just_pressed(Keys.SPACE) and self.on_ground:
            self.rigidbody.add_impulse(Vector2(0, -self.jump_force))
            self.on_ground = False
    
    def on_collision(self, other, collision_info):
        if collision_info.normal.y < 0:
            self.on_ground = True
        
        if other.game_object.tag == "Enemy":
            self.health.take_damage(10)
    
    def check_bounds(self):
        engine = voidray.get_engine()
        pos = self.transform.position
        
        # Keep player on screen
        pos.x = max(20, min(engine.width - 20, pos.x))
        if pos.y > engine.height:
            # Player fell off screen
            self.transform.position = Vector2(100, 100)
            self.rigidbody.set_velocity(Vector2.zero)
```

State Machine Pattern:
```python
class PlayerStateMachine(Component):
    def __init__(self):
        super().__init__()
        self.current_state = "idle"
        self.states = {
            "idle": self.idle_state,
            "running": self.running_state,
            "jumping": self.jumping_state,
            "falling": self.falling_state
        }
    
    def update(self, delta_time):
        if self.current_state in self.states:
            self.states[self.current_state](delta_time)
    
    def change_state(self, new_state):
        if new_state in self.states:
            self.current_state = new_state
    
    def idle_state(self, delta_time):
        # Idle behavior
        pass
    
    def running_state(self, delta_time):
        # Running behavior
        pass
    
    # ... other states
```

========================================
📞 SUPPORT & RESOURCES
========================================

Additional Documentation:
- Getting Started Guide: docs/getting_started.txt
- Physics Guide: docs/physics_guide.txt
- Tutorial: docs/tutorial_basic_game.txt

Community Resources:
- GitHub Issues: Report bugs and request features
- Discussions: Ask questions and share projects
- Examples: Working code samples in examples/ folder

Version: VoidRay 2.5-stable
Last Updated: 2025
========================================
